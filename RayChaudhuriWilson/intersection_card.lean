import Mathlib.Data.Nat.Choose.Multinomial

open Finset

variable {Œ± : Type} [DecidableEq Œ±] {X: Finset Œ±} (s: ‚Ñï) (r: ‚Ñï) (A B : Finset Œ±)

/--Projection map from S to (A‚à©S, (B\A)‚à© S)-/
def intersect_i: (a : Finset Œ±) ‚Üí a ‚àà {S ‚àà powersetCard s X | #(A ‚à© S) = r ‚àß S ‚äÜ B}
    ‚Üí Finset Œ± √ó Finset Œ± :=
  fun S ‚Ü¶ fun ?_ ‚Ü¶ ((A: Finset Œ±) ‚à© S, ((B: Finset Œ±) \ (A: Finset Œ±)) ‚à© S)

/--Reverse map from (S.1, S.2) to S.1 ‚à™ S.2-/
def intersect_j: (a : Finset Œ± √ó Finset Œ±) ‚Üí
    a ‚àà powersetCard r (A ‚à© B) √óÀ¢ powersetCard (s - r) (B \ A) ‚Üí Finset Œ± :=
  fun S ‚Ü¶ fun ?_ ‚Ü¶ S.1 ‚à™ S.2

/--
The cardinality of {S‚ààùìü‚Çõ(X)| |A‚à©S|=r and S‚äÜB} is equal to the number of ways choosing r elements
in A‚à©B and s-r elements in B\A.
#{S‚ààùìü‚Çõ(X)| |A‚à©S|=r and S‚äÜB} = #ùìü·µ£(A‚à©B) √ó #ùìü‚Çõ‚Çã·µ£(B\A)
-/
lemma card_powerset_card_product (hrs : r ‚â§ s) (hA: A ‚äÜ X) (hB: B ‚äÜ X) :
    #{S ‚àà powersetCard s X | #(A ‚à© S) = r
    ‚àß (S: Finset Œ±) ‚äÜ (B: Finset Œ±)} = #((powersetCard r ((A: Finset Œ±) ‚à© (B: Finset Œ±))) √óÀ¢
    (powersetCard (s-r) ((B: Finset Œ±) \ (A: Finset Œ±)))) :=by
  apply Finset.card_bij' (intersect_i s r A B) (intersect_j s r A B)
  ¬∑ intro S hS
    unfold intersect_i; unfold intersect_j
    simp only [mem_filter, mem_powersetCard] at hS
    simp_rw [‚Üê union_inter_distrib_right, union_sdiff_self_eq_union, inter_eq_right]
    exact subset_trans hS.2.2 subset_union_right
  ¬∑ intro S hS
    unfold intersect_i; unfold intersect_j
    simp only [mem_product, mem_powersetCard] at hS
    obtain ‚ü®‚ü®hS1, _‚ü© , ‚ü®hS3, _‚ü© ‚ü©:= hS
    simp_rw [inter_union_distrib_left,
      disjoint_iff_inter_eq_empty.mp (disjoint_of_subset_right hS3 disjoint_sdiff),
      union_empty]
    rw[inter_comm, inter_eq_left.mpr (subset_inter_iff.mp hS1).left]
    have hBAS: ((B: Finset Œ±) \ (A:Finset Œ±)) ‚à© S.1 ‚äÜ
        ((B: Finset Œ±) \ (A:Finset Œ±)) ‚à© (A: Finset Œ±) := by
      exact inter_subset_inter_left (subset_inter_iff.mp hS1).left
    rw [disjoint_iff_inter_eq_empty.mp sdiff_disjoint] at hBAS
    rw [subset_empty.mp hBAS, empty_union, inter_eq_right.mpr hS3]
  ¬∑ intro S hS
    unfold intersect_i
    simp only [mem_product, mem_powersetCard, inter_subset_left, true_and]
    simp only [mem_filter, mem_powersetCard] at hS
    refine' ‚ü®‚ü®inter_subset_inter_left hS.2.2, hS.2.1‚ü©, ?_‚ü©
    have hBAS: ((B: Finset Œ±) \ (A: Finset Œ±)) ‚à© S = ((B: Finset Œ±) ‚à© S) \ ((A: Finset Œ±) ‚à© S) := by
      ext x
      simp only [mem_inter, mem_sdiff, not_and];
      exact ‚ü®fun hx =>‚ü®‚ü®hx.left.left, hx.right‚ü©,
          fun hxA =>by exfalso; exact hx.left.right hxA‚ü©,
          fun hx =>‚ü®‚ü®hx.left.left, by by_contra hA; exact hx.right hA hx.left.right‚ü©,
          hx.left.right‚ü©‚ü©
    rw [hBAS, inter_eq_right.mpr hS.2.2, card_sdiff, hS.1.2, hS.2.1]
    exact inter_subset_right
  ¬∑ intro S hS
    unfold intersect_j
    simp only [mem_filter, mem_powersetCard]
    simp only [mem_product, mem_powersetCard] at hS
    obtain ‚ü®‚ü®h1, h2‚ü© , ‚ü®h3, h4‚ü© ‚ü©:= hS
    refine' ‚ü®‚ü®fun x hx => by_cases (fun (hxS: x ‚àà S.1) => hA (mem_of_mem_filter x (h1 hxS)))
      (fun (hxS: ¬¨ x ‚àà S.1) => hB (mem_sdiff.mp (h3
      ((propext (or_iff_right hxS)).mp (mem_union.mp hx)))).left),
      by rw [card_union_eq_card_add_card.mpr (disjoint_of_subset_left h1
      (disjoint_of_subset_right h3 (disjoint_of_subset_left (inter_subset_left) disjoint_sdiff))),
      h2, h4, Nat.add_sub_cancel' hrs]‚ü© ,
      ‚ü®by rw [inter_union_distrib_left, inter_comm, inter_eq_left.mpr (subset_inter_iff.mp h1).left,
      disjoint_iff_inter_eq_empty.mp (disjoint_of_subset_right h3 disjoint_sdiff),
      union_empty]; exact h2, union_subset (subset_inter_iff.mp h1).right
      (Subset.trans h3 sdiff_subset)‚ü©‚ü©


lemma card_set_subset_set_nat_choose (hrs : r ‚â§ s) (hA: A ‚äÜ X) (hB: B ‚äÜ X)  :
    #{S ‚àà powersetCard s X | #(A ‚à© S) = r ‚àß (S: Finset Œ±) ‚äÜ (B: Finset Œ±)}
    = (Nat.choose (#(A‚à©B)) r) * (Nat.choose (#(B\A) ) (s-r)) :=by
  simp_rw [card_powerset_card_product s r A B hrs hA hB, card_product, card_powersetCard]

lemma powersetCard_eq_filter_of_subset (X : Finset Œ±) (hA : A ‚äÜ X):  powersetCard s A = {S ‚àà powersetCard s X | S ‚äÜ A} := by
  rw [@Subset.antisymm_iff]
  constructor
  ¬∑ intro S hS
    simp only [mem_powersetCard] at hS
    simp only [mem_filter, mem_powersetCard]
    refine' ‚ü®‚ü®fun ‚¶Éa‚¶Ñ a_1 ‚Ü¶ hA (hS.1 a_1), hS.2‚ü©, hS.1‚ü©
  ¬∑ intro S hS
    simp only [mem_powersetCard]
    simp only [mem_filter, mem_powersetCard] at hS
    refine' ‚ü®hS.2, hS.1.2‚ü©

/--
Given a finite set `X` and a subset `A ‚äÜ X`, the number of elements of the
attached `s`‚Äëelement subsets of `X`which are contained in `A` is `(#A).choose s`.
-/
lemma card_attach_powersetCard_filter_of_subset
    (hA : A ‚äÜ X): #({S ‚àà (powersetCard s X).attach | S.val ‚äÜ A}) = (#A).choose s :=by
  rw [‚Üê card_powersetCard s A]
  rw [powersetCard_eq_filter_of_subset s A X hA]
  let hequiv:{S ‚àà (powersetCard s X).attach | S.val ‚äÜ A}
  ‚âÉ {S ‚àà powersetCard s X | S ‚äÜ A} := {
    toFun := fun S =>‚ü®S.1.1, mem_filter.mpr ‚ü®by simp only [coe_mem], (mem_filter.mp S.2).2‚ü©‚ü©
    invFun := fun S => ‚ü®‚ü®S.1, (mem_filter.mp S.2).1‚ü©,
        mem_filter.mpr ‚ü®by simp only [mem_attach], (mem_filter.mp S.2).2‚ü©‚ü©
    left_inv S:=by simp only [Subtype.coe_eta]
    right_inv S:=by simp only [Subtype.coe_eta]
  }
  rw [Finset.card_eq_of_equiv hequiv]
