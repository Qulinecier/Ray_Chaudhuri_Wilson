import Mathlib.Data.Finset.Defs
import Mathlib.Data.Finset.Card
import Mathlib.Data.Finset.Powerset
import Mathlib.Data.Finset.Lattice.Basic
import Mathlib.Data.Nat.Choose.Multinomial
import Mathlib.Data.Nat.Choose.Basic
import Mathlib.Data.Real.Basic
import Mathlib.LinearAlgebra.Span.Defs
import Mathlib.LinearAlgebra.Dimension.Finrank
import Mathlib.LinearAlgebra.Dimension.Constructions
import Mathlib.Data.Fintype.Defs

open Finset
variable {Œ± : Type} (n : ‚Ñï) [DecidableEq Œ±]
variable {X: Finset Œ±} (F: Finset X.powerset)











def uniform {X: Finset Œ±} (F: Finset X.powerset) (k : ‚Ñï) : Prop := ‚àÄ (A : F), #A.val.val = k





def intersecting {X: Finset Œ±} (F: Finset X.powerset) (L : Set ‚Ñï) :=
  ‚àÄ (A B: F), #(A.val.val ‚à© B.val.val) ‚àà L



variable (k s: ‚Ñï) (L : Finset ‚Ñï)


instance: Module ‚Ñù (F ‚Üí ‚Ñù) := sorry


instance: Module ‚Ñù (F ‚Üí ‚Ñù) := sorry




def S_bar (S : Finset Œ±): F ‚Üí ‚Ñù  :=
def S_bar (S : Finset Œ±): F ‚Üí ‚Ñù  :=
    fun A => if S ‚äÜ A then 1 else 0

<<<<<<< HEAD
/--The intersection indicator vector of subset S: H = ‚àë(B:B ‚àà F,|B‚à©S|=Œº)-/
def intersection_indicator (S: Finset Œ±) (Œº : ‚Ñï): F ‚Üí ‚Ñù :=
    fun B => if #(B ‚à© S) = Œº then 1 else 0

/--The indicator combine both subset and intersection, i.e. G = ‚àë(S_bar: S‚àà ùìü‚Çõ(X), |S‚à©A| = Œº)-/
def subset_intersection_indicator (A: Finset Œ±) (Œº : ‚Ñï): F ‚Üí ‚Ñù :=
    fun B => ‚àë (S: powersetCard s X), if #(A ‚à© S)  = Œº then (subset_indicator F S B) else 0

variable (r: ‚Ñï)

--TODO
lemma indicator_eq (A: Finset Œ±): subset_intersection_indicator F s A r =
    ‚àë (l: L), (Nat.choose l r) * (Nat.choose (#A - l) (s - r))
    * (intersection_indicator F A l) := by
  unfold subset_intersection_indicator
  funext B
  simp only [Finset.sum_apply]
  unfold subset_indicator
  unfold intersection_indicator
  simp only [Pi.natCast_def, Pi.mul_apply, mul_ite, mul_one, mul_zero]

  have h1: (‚àë (S: powersetCard s X), if #(A ‚à© S) = r then (if (S: Finset Œ±) ‚äÜ (B: Finset Œ±) then (1: ‚Ñù) else 0) else 0)
    = ‚àë (x : L), (‚àë (S: powersetCard s X),
    if (#(S ‚à© (B: Finset Œ±)) = x) then (if #(A ‚à© S) = r then
    (if (S: Finset Œ±) ‚äÜ (B: Finset Œ±) then (1: ‚Ñù) else 0) else 0) else 0) := by sorry

  rw [h1]
  sorry

=======
example (f: ‚Ñï ‚Üí  ‚Ñï ) (h : (a:‚Ñï) = b) : f a =  f b := by exact congrArg f h
>>>>>>> parent of 030fdbe (added G_r)

variable (S: X.powerset)
theorem span_bar: Submodule.span ‚Ñù { f | ‚àÉ (S : X.powerset), f = S_bar F S ‚àß #S.val = s}
    = (‚ä§: Submodule ‚Ñù (F ‚Üí ‚Ñù)) := sorry
theorem span_bar: Submodule.span ‚Ñù { f | ‚àÉ (S : X.powerset), f = S_bar F S ‚àß #S.val = s}
    = (‚ä§: Submodule ‚Ñù (F ‚Üí ‚Ñù)) := sorry

#check { x // x ‚àà X.powerset }
#check { x // x ‚àà X.powerset }

theorem finrank_R {Œ≤: Type} (Œπ : Finset Œ≤):
    Module.finrank ‚Ñù (Œπ ‚Üí ‚Ñù) = Fintype.card Œπ := by
  simp [Module.finrank]
theorem finrank_R {Œ≤: Type} (Œπ : Finset Œ≤):
    Module.finrank ‚Ñù (Œπ ‚Üí ‚Ñù) = Fintype.card Œπ := by
  simp [Module.finrank]

theorem finrank_pi (Œπ : Type) [Fintype Œπ]:
theorem finrank_pi (Œπ : Type) [Fintype Œπ]:
    Module.finrank ‚Ñù (Œπ ‚Üí ‚Ñù) = Fintype.card Œπ := by
  simp [Module.finrank]

lemma F_rank : Module.finrank ‚Ñù (‚ä§: Submodule ‚Ñù (F ‚Üí ‚Ñù)) = #F := by
lemma F_rank : Module.finrank ‚Ñù (‚ä§: Submodule ‚Ñù (F ‚Üí ‚Ñù)) = #F := by
  simp only [finrank_top]
  have h:= finrank_pi { x // x ‚àà F }
  have h:= finrank_pi { x // x ‚àà F }
  rw [‚Üê Fintype.card_coe F]
  exact h


noncomputable def S_bar_set :=
  Finset.image (fun (S : Finset Œ±) => (S_bar F S: F ‚Üí ‚Ñù)) (powersetCard s X)
  exact h


noncomputable def S_bar_set :=
  Finset.image (fun (S : Finset Œ±) => (S_bar F S: F ‚Üí ‚Ñù)) (powersetCard s X)


lemma S_bar_rank (hX : #X = n): #(S_bar_set F s)
lemma S_bar_rank (hX : #X = n): #(S_bar_set F s)
    ‚â§ Nat.choose n s := by
  have h1 : #(S_bar_set F s) ‚â§ #(powersetCard s X) := by
  have h1 : #(S_bar_set F s) ‚â§ #(powersetCard s X) := by
    exact Finset.card_image_le
  have h2 : #(powersetCard s X) = n.choose s := by
    have h := (Finset.card_powersetCard s X).symm
    rw [hX] at h
    exact h.symm
  rw [h2.symm]
  exact h1



example (h: Submodule.span ‚Ñù (S_bar_set F s) = (‚ä§: Submodule ‚Ñù (F ‚Üí ‚Ñù))):
    #F ‚â§ Nat.choose n s := by
  have h1 : Module.finrank ‚Ñù (Submodule.span ‚Ñù { f | ‚àÉ (S : X.powerset), f = S_bar F S ‚àß #S.val = s})


example (h: Submodule.span ‚Ñù (S_bar_set F s) = (‚ä§: Submodule ‚Ñù (F ‚Üí ‚Ñù))):
    #F ‚â§ Nat.choose n s := by
  have h1 : Module.finrank ‚Ñù (Submodule.span ‚Ñù { f | ‚àÉ (S : X.powerset), f = S_bar F S ‚àß #S.val = s})
      = Module.finrank ‚Ñù (‚ä§: Submodule ‚Ñù (F ‚Üí ‚Ñù)) := by
    rw [h]
  rw [F_rank] at h1
  have hF : Fintype F := sorry
  have h2 := S_bar_rank n { x // x ‚àà powerset X} s
  have h3 : Module.finrank ‚Ñù (Submodule.span ‚Ñù
      { f | ‚àÉ (S : X.powerset), f = S_bar F S ‚àß #S.val = s})
      ‚â§ #{ f | ‚àÉ (S : X.powerset), f = S_bar F S ‚àß #S.val = s} := sorry
  have hF : Fintype F := sorry
  have h2 := S_bar_rank n { x // x ‚àà powerset X} s
  have h3 : Module.finrank ‚Ñù (Submodule.span ‚Ñù
      { f | ‚àÉ (S : X.powerset), f = S_bar F S ‚àß #S.val = s})
      ‚â§ #{ f | ‚àÉ (S : X.powerset), f = S_bar F S ‚àß #S.val = s} := sorry
  rw [h1] at h3
  exact Nat.le_trans h3 h2

  done
  done

theorem Ray_Chaudhuri_Wilson (huniform: uniform F k) (hintersect : intersecting F L)
    (hL : #L = s): #F ‚â§ Nat.choose n s := by sorry



def vector_space_F (F: Finset X.powerset) := F ‚Üí ‚Ñù



def vector_space_F (F: Finset X.powerset) := F ‚Üí ‚Ñù
