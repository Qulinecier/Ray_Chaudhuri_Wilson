import Mathlib.Data.Finset.Defs
import Mathlib.Data.Finset.Card
import Mathlib.Data.Finset.Powerset
import Mathlib.Data.Finset.Lattice.Basic
import Mathlib.Data.Nat.Choose.Multinomial
import Mathlib.Data.Nat.Choose.Basic
import Mathlib.Data.Real.Basic
import Mathlib.LinearAlgebra.Span.Defs
import Mathlib.LinearAlgebra.Dimension.Finrank
import Mathlib.LinearAlgebra.Dimension.Constructions
import Mathlib.Data.Fintype.Defs
import Mathlib.LinearAlgebra.Matrix.NonsingularInverse




open Finset
variable {Œ± : Type} (n : ‚Ñï) [DecidableEq Œ±]
variable {X: Finset Œ±} (F: Finset X.powerset)

def uniform {X: Finset Œ±} (F: Finset X.powerset) (k : ‚Ñï) : Prop := ‚àÄ (A : F), #A.val.val = k

def intersecting {X: Finset Œ±} (F: Finset X.powerset) (L : Set ‚Ñï) :=
  ‚àÄ (A B: F), #(A.val.val ‚à© B.val.val) ‚àà L

variable (k s: ‚Ñï) (L : Finset ‚Ñï)

instance: Module ‚Ñù (F ‚Üí ‚Ñù) := by infer_instance

/--The indicator vector of subset S: S = ‚àë(A: A ‚àà F, S ‚äÜ A).-/
def subset_indicator (S : Finset Œ±): F ‚Üí ‚Ñù  :=
    fun A => if S ‚äÜ A then 1 else 0

/--The intersection indicator vector of subset S: H = ‚àë(B:B ‚àà F,|B‚à©S|=Œº)-/
def intersection_indicator (S: Finset Œ±) (Œº : ‚Ñï): F ‚Üí ‚Ñù :=
    fun B => if #(B ‚à© S) = Œº then 1 else 0

/--The indicator combine both subset and intersection, i.e. G = ‚àë(S_bar: S‚àà ùìü‚Çõ(X), |S‚à©A| = Œº)-/
def subset_intersection_indicator (A: Finset Œ±) (Œº : ‚Ñï): F ‚Üí ‚Ñù :=
    fun B => ‚àë S ‚àà powersetCard s X, if #(A ‚à© S)  = Œº then (subset_indicator F S B) else 0



variable (r: ‚Ñï)
variable (A B : F)



/--Projection map from S to (A‚à©S, (B\A)‚à© S)-/
def intersect_i: (a : Finset Œ±) ‚Üí a ‚àà {S ‚àà powersetCard s X | #(‚Üë‚ÜëA ‚à© S) = r ‚àß S ‚äÜ ‚Üë‚ÜëB}
    ‚Üí Finset Œ± √ó Finset Œ± :=
  fun S ‚Ü¶ fun _ ‚Ü¶ ((A: Finset Œ±) ‚à© S, ((B: Finset Œ±) \ (A: Finset Œ±)) ‚à© S)

/--Reverse map from (S.1, S.2) to S.1 ‚à™ S.2-/
def intersect_j: (a : Finset Œ± √ó Finset Œ±) ‚Üí
    a ‚àà powersetCard r (‚Üë‚ÜëA ‚à© ‚Üë‚ÜëB) √óÀ¢ powersetCard (s - r) (‚Üë‚ÜëB \ ‚Üë‚ÜëA) ‚Üí Finset Œ± :=
  fun S ‚Ü¶ fun _ ‚Ü¶ S.1 ‚à™ S.2

/--
The cardinality of {S‚ààùìü‚Çõ(X)| |A‚à©S|=r and S‚äÜB} is equal to the number of ways choosing r elements
in A‚à©B and s-r elements in B\A.
#{S‚ààùìü‚Çõ(X)| |A‚à©S|=r and S‚äÜB} = #ùìü·µ£(A‚à©B) √ó #ùìü‚Çõ‚Çã·µ£(B\A)
-/
lemma card_powerset_card_product (hrs : r ‚â§ s) : #{S ‚àà powersetCard s X | #(A.val.val ‚à© S) = r
    ‚àß (S: Finset Œ±) ‚äÜ (B: Finset Œ±)} = #((powersetCard r ((A: Finset Œ±) ‚à© (B: Finset Œ±))) √óÀ¢
    (powersetCard (s-r) ((B: Finset Œ±) \ (A: Finset Œ±)))) :=by
  apply Finset.card_bij' (intersect_i F s r A B) (intersect_j F s r A B)
  ¬∑ intro S hS
    unfold intersect_i
    unfold intersect_j
    simp only
    simp only [mem_filter, mem_powersetCard] at hS
    cases' hS with hS1 hS3
    cases' hS1 with hS1 hS2
    cases' hS3 with hS3 hS4
    rw [‚Üê union_inter_distrib_right]
    simp only [union_sdiff_self_eq_union, inter_eq_right]
    exact subset_trans hS4 subset_union_right
  ¬∑ intro S hS
    unfold intersect_i
    unfold intersect_j
    simp only [mem_product, mem_powersetCard] at hS
    cases' hS with hS1 hS3
    cases' hS1 with hS1 hS2
    cases' hS3 with hS3 hS4
    rw [inter_union_distrib_left]
    have hdisj : Disjoint (A: Finset Œ±) S.2 := by
      apply disjoint_of_subset_right hS3
      exact disjoint_sdiff
    rw [disjoint_iff_inter_eq_empty.mp hdisj, union_empty, inter_union_distrib_left,
      inter_comm, inter_eq_left.mpr (subset_inter_iff.mp hS1).left]
    have hdisj2 : Disjoint ((B: Finset Œ±) \ (A:Finset Œ±)) (A: Finset Œ±) := by exact
      sdiff_disjoint
    have h1: ((B: Finset Œ±) \ (A:Finset Œ±)) ‚à© S.1 ‚äÜ
        ((B: Finset Œ±) \ (A:Finset Œ±)) ‚à© (A: Finset Œ±) := by
      exact inter_subset_inter_left (subset_inter_iff.mp hS1).left
    rw [disjoint_iff_inter_eq_empty.mp hdisj2] at h1
    rw [subset_empty.mp h1, empty_union, inter_eq_right.mpr hS3]
  ¬∑ intro S hS
    unfold intersect_i
    simp only [mem_product, mem_powersetCard, inter_subset_left, true_and]
    simp only [mem_filter, mem_powersetCard] at hS
    cases' hS with h1 h2
    cases' h2 with h2 h3
    cases' h1 with h1 h4
    refine' ‚ü®‚ü®inter_subset_inter_left h3, h2‚ü©, ?_‚ü©
    have h5: ((B: Finset Œ±) \ (A: Finset Œ±)) ‚à© S = ((B: Finset Œ±) ‚à© S) \ ((A: Finset Œ±) ‚à© S) := by
      ext x
      simp only [mem_inter, mem_sdiff, not_and]
      constructor
      ¬∑ intro hx
        cases' hx with hx1 hx2
        cases' hx1 with hx1 hx3
        refine' ‚ü®‚ü®hx1, hx2‚ü© , ?_‚ü©
        intro hx4
        exfalso
        apply hx3
        exact hx4
      ¬∑ intro hx
        cases' hx with hx1 hx2
        cases' hx1 with hx1 hx3
        refine' ‚ü®‚ü®hx1, ?_‚ü© , hx3‚ü©
        by_contra hA
        apply hx2
        ¬∑ exact hA
        ¬∑ exact hx3
    rw [h5, inter_eq_right.mpr h3, card_sdiff, h4, h2]
    exact inter_subset_right
  ¬∑ intro S hS
    unfold intersect_j
    simp only [mem_filter, mem_powersetCard]
    simp only [mem_product, mem_powersetCard] at hS
    cases' hS with h1 h3
    cases' h1 with h1 h2
    cases' h3 with h3 h4
    refine' ‚ü®‚ü®?_, ?_‚ü© , ‚ü®?_,
      union_subset (subset_inter_iff.mp h1).right (Subset.trans h3 sdiff_subset)‚ü©‚ü©
    ¬∑ intro x hx
      by_cases hxS: x ‚àà S.1
      ¬∑ exact (mem_powerset.mp A.val.property) (mem_of_mem_filter x (h1 hxS))
      ¬∑ have h5: x ‚àà S.2 :=by
          rw [mem_union] at hx
          cases' hx with hx1 hx2
          ¬∑ exfalso
            apply hxS
            exact hx1
          ¬∑ exact hx2
        exact (mem_powerset.mp B.val.property) (mem_sdiff.mp (h3 h5)).left
    ¬∑ have h5: #(S.1 ‚à™ S.2) = #S.1 + #S.2 := by
        rw [card_union_eq_card_add_card]
        apply disjoint_of_subset_left h1
        apply disjoint_of_subset_right h3
        apply disjoint_of_subset_left (inter_subset_left)
        exact disjoint_sdiff
      rw [h5, h2, h4, Nat.add_sub_cancel' hrs]
    ¬∑ have hdisj: Disjoint (A: Finset Œ±) S.2 := by
        apply disjoint_of_subset_right h3
        exact disjoint_sdiff
      rw [inter_union_distrib_left, inter_comm, inter_eq_left.mpr (subset_inter_iff.mp h1).left,
        disjoint_iff_inter_eq_empty.mp hdisj, union_empty]
      exact h2

/--
‚àë(S_bar: S‚ààùìü‚Çõ(X), |S‚à©A|=r) = ‚àëŒº‚ààL, binom(Œº, r) * binom(k-Œº, s-r)* H,
where H is the uniform intersection indicator
-/
lemma vector_sum_eq_intersection_sum (hintersect : intersecting F L)
    (huniform: uniform F k) (r : ‚Ñï) (hrs : r ‚â§ s) (A : F):
    subset_intersection_indicator F s A r =
    ‚àë (l‚àà L), (Nat.choose l r) * (Nat.choose (k - l) (s - r))
    * (intersection_indicator F A l) := by
  unfold subset_intersection_indicator
  funext B
  simp only [Finset.sum_apply]
  unfold subset_indicator
  simp only [Pi.natCast_def, Pi.mul_apply, mul_ite, mul_one, mul_zero]
  unfold intersecting at hintersect
  have hAB := hintersect A B

  have h1: (‚àë S ‚àà powersetCard s X, if #(A.val.val ‚à© S) = r then
      (if (S: Finset Œ±) ‚äÜ (B: Finset Œ±) then (1: ‚Ñù) else 0) else 0)
    = ‚àë (x ‚àà  L), ‚àë S ‚àà  powersetCard s X,
    if ((#(A.val.val ‚à© S) = r) ‚àß ((S: Finset Œ±) ‚äÜ (B: Finset Œ±)))
    then (intersection_indicator F A x B) else 0 := by
    unfold intersection_indicator
    let p := ‚àë S ‚àà powersetCard s X, if #(A.val.val ‚à© S) = r then
        (if (S: Finset Œ±) ‚äÜ (B: Finset Œ±) then (1: ‚Ñù) else 0) else 0
    have h : p = ‚àë x ‚àà  L, if #(A.val.val ‚à© B.val.val) = x then p else 0 := by
      let f := fun x => if #(A.val.val ‚à© B.val.val) = x then p else 0
      have h‚ÇÄ : ‚àÄ b ‚àà L, b ‚â† #(A.val.val ‚à© B.val.val) ‚Üí f b = 0 :=
        fun b a a ‚Ü¶ if_neg (id (Ne.symm a))
      have h‚ÇÅ : #(A.val.val ‚à© B.val.val) ‚àâ L ‚Üí f (#(A.val.val ‚à© B.val.val)) = 0 := by
        intro h
        exfalso
        exact h hAB
      rw [Finset.sum_eq_single (#(A.val.val ‚à© B.val.val)) h‚ÇÄ h‚ÇÅ]
      exact (if_pos rfl).symm
    unfold p at h
    rw [h]
    congr! with x hx
    by_cases hP: #(A.val.val ‚à© B.val.val) = x
    ¬∑ rw [if_pos hP, inter_comm, if_pos hP]
      congr with S
      by_cases hAS: #(A.val.val ‚à© S) = r
      ¬∑ simp [hAS]
      ¬∑ simp [hAS]
    ¬∑ rw [if_neg hP, inter_comm, if_neg hP]
      simp only [univ_eq_attach, ite_self, sum_const_zero]

  rw [h1]

  congr! with Œº hŒº
  rw [(sum_filter (fun (S: Finset Œ±) => (#(A.val.val ‚à© S) = r)
    ‚àß ((S: Finset Œ±) ‚äÜ (B: Finset Œ±))) fun a ‚Ü¶ (intersection_indicator F A Œº B)).symm]
  rw [sum_const]
  simp only [nsmul_eq_mul]
  unfold intersection_indicator
  by_cases hinter: #(B.val.val ‚à© A.val.val) = Œº
  ¬∑ simp [hinter]
    unfold uniform at huniform
    have hB := huniform B
    have hA := huniform A
    rw [card_powerset_card_product F s r A B hrs]
    simp only [card_product, card_powersetCard, Nat.cast_mul]
    rw [inter_comm, hinter]
    have hdiff: (B: Finset Œ±) \ (A: Finset Œ±) = (B: Finset Œ±) \ ((B: Finset Œ±) ‚à© (A: Finset Œ±)) :=by
      simp only [sdiff_inter_self_left]
    rw [hdiff, card_sdiff, hB, hinter]
    simp only [inter_subset_left]
  ¬∑ rw [if_neg hinter]
    simp only [mul_zero]


variable (S: X.powerset)

/--The set of indicator vectors {S_bar : S ‚àà ùìü‚Çõ(X)}-/
noncomputable def subset_indicator_set :=
  Finset.image (fun (S : Finset Œ±) => (subset_indicator F S: F ‚Üí ‚Ñù)) (powersetCard s X)

theorem my_finrank_pi (Œπ : Type) [Fintype Œπ]:
    Module.finrank ‚Ñù (Œπ ‚Üí ‚Ñù) = Fintype.card Œπ := by
  simp [Module.finrank]

lemma F_rank {Œ± : Type} {X : Finset Œ±} (F : Finset { x // x ‚àà X.powerset }):
    Module.finrank ‚Ñù (‚ä§: Submodule ‚Ñù (F ‚Üí ‚Ñù)) = #F := by
  simp only [finrank_top]
  rw [‚Üê Fintype.card_coe F]
  exact my_finrank_pi F


lemma subset_indicator_rank (hX : #X = n): #(subset_indicator_set F s)
    ‚â§ Nat.choose n s := by
  have h1 : #(subset_indicator_set F s) ‚â§ #(powersetCard s X) := by
    exact Finset.card_image_le
  have h2 : #(powersetCard s X) = n.choose s := by
    have h := (Finset.card_powersetCard s X).symm
    rw [hX] at h
    exact h.symm
  rw [h2.symm]
  exact h1

#check rank_span_finset_le

lemma subset_vector_span_dim_le (h: Submodule.span ‚Ñù (toSet (subset_indicator_set F s)) = (‚ä§: Submodule ‚Ñù (F ‚Üí ‚Ñù)))
  (hX : #X = n) : #F ‚â§ Nat.choose n s := by
  have h1 : Module.finrank ‚Ñù (Submodule.span ‚Ñù (toSet (subset_indicator_set F s)))
      = Module.finrank ‚Ñù (‚ä§: Submodule ‚Ñù (F ‚Üí ‚Ñù)) := by
    rw [h]
  rw [F_rank] at h1
  have h2 := subset_indicator_rank n F s hX
  have h3 : Module.finrank ‚Ñù (Submodule.span ‚Ñù (toSet (subset_indicator_set F s)))
      ‚â§ #(subset_indicator_set F s) := by
    have h : Module.rank ‚Ñù (Submodule.span ‚Ñù (toSet (subset_indicator_set F s)))
      ‚â§ #(subset_indicator_set F s) := by
        exact rank_span_finset_le (subset_indicator_set F s)
    exact Module.finrank_le_of_rank_le h
  rw [h1] at h3
  exact Nat.le_trans h3 h2

instance: Fintype {x | x ‚àà F} := by exact Set.fintypeMemFinset F

#check F



/-Set of H‚ÇÄ-/
noncomputable def subset_H :=
  Finset.image (fun (S : X.powerset) => (intersection_indicator F S k: F ‚Üí ‚Ñù)) F


/--span{intersecting indicator H} = ‚Ñù^ùìï-/
lemma span_H (huniform: uniform F k): (‚ä§: Submodule ‚Ñù (F ‚Üí ‚Ñù)) =
    Submodule.span ‚Ñù (subset_H F k):=by
  refine' le_antisymm ?_ ?_
  ¬∑ intro x hx
    unfold subset_H
    simp only [coe_image]
    have hx_coe: x = ‚àë (S:F), (x S) ‚Ä¢ intersection_indicator F S k := by
      nth_rw 1 [(Basis.sum_repr (Pi.basisFun ‚Ñù F) x).symm]
      congr! with A hA
      simp only [Pi.basisFun_apply]
      unfold intersection_indicator
      funext B
      by_cases hB: A = B
      ¬∑ rw [hB]
        simp only [Pi.single_eq_same, inter_self]
        have hBk:= huniform B
        rw [if_pos]
        exact hBk
      ¬∑ rw [Pi.single_eq_of_ne' hB 1]
        rw [if_neg]
        by_contra hAB
        have hAB_new : (A:Finset Œ± ) ‚â† (B: Finset Œ± ) :=by
          by_contra h1
          exact hB (Subtype.eq (Subtype.eq h1))
        apply hAB_new
        have hBk:= huniform B
        have hAk:= huniform A
        have hkk: k ‚â§ k := by exact Nat.le_refl k
        have hBAB: #(B: Finset Œ±) ‚â§ #((B: Finset Œ±) ‚à© (A: Finset Œ±)) := by
          nth_rw 1 [‚Üê hBk] at hkk
          rw [‚Üê hAB] at hkk
          exact hkk
        have hABA: #(A: Finset Œ±) ‚â§ #((B: Finset Œ±) ‚à© (A: Finset Œ±)) := by
          nth_rw 1 [‚Üê hAk] at hkk
          rw [‚Üê hAB] at hkk
          exact hkk
        exact Eq.trans ((subset_iff_eq_of_card_le hABA).mp inter_subset_right).symm
          ((subset_iff_eq_of_card_le hBAB).mp inter_subset_left)
    rw [hx_coe]
    apply sum_mem
    intro A hA
    rw [Submodule.mem_span]
    intro V hV
    simp only [Set.image_subset_iff] at hV
    have hAp : ‚ü®A.val.val, A.val.property‚ü© ‚àà F :=by
      simp only [Subtype.coe_eta, coe_mem]
    have h:= hV hAp
    simp only [Set.mem_preimage, SetLike.mem_coe] at h
    exact Submodule.smul_mem V (x A) h
  ¬∑ exact fun ‚¶Éx‚¶Ñ a ‚Ü¶ trivial


variable (hL: k‚ààL)

#check Finset.image (fun (A: X.powerset) => subset_intersection_indicator F s A r) F


noncomputable def subset_G := ‚ãÉ (r : L),
    toSet (Finset.image (fun (A: X.powerset) =>
    subset_intersection_indicator F s A r) F)

#check subset_G F s
#check vector_sum_eq_intersection_sum


instance: Membership (Finset Œ±) (Finset X.powerset)where
  mem := fun A => fun B => ‚àÉ x ‚àà A, x.val = B

noncomputable def enumL {s: ‚Ñï} {L : Finset ‚Ñï} (hL_card: #L = s) : L ‚âÉ Fin s :=
  Finset.equivFinOfCardEq hL_card

variable (hL_card : #L = s) (hL: k‚ààL)



lemma span_G (hL_card : #L = s) (hL: k‚ààL) (hrL: ‚àÄ(r:L), r‚â§k) (huniform: uniform F k) (hintersect : intersecting F L):
    Submodule.span ‚Ñù (toSet (subset_H F k))‚â§
    Submodule.span ‚Ñù (subset_G F s L):= by
  unfold subset_H
  unfold subset_G
  simp only [coe_image]
  apply Submodule.span_le.2
  intro H hH
  simp only [SetLike.mem_coe]
  simp only [Set.mem_image, Set.mem_image, mem_coe, mem_powersetCard] at hH
  cases' hH with A hA
  rw [Submodule.span_iUnion]
  rw [@Submodule.mem_iSup_iff_exists_finset]
  let kset : Set L := {‚ü®k, hL‚ü©}
  have: Fintype kset := by exact Fintype.ofFinite ‚Üëkset
  use kset.toFinset
  simp only [Set.mem_toFinset]
  unfold kset
  simp only [Set.mem_singleton_iff, iSup_iSup_eq_left]
  cases' hA with hA1 hA2
  have himp_le: Submodule.span ‚Ñù ({subset_intersection_indicator F s A k}) ‚â§
   Submodule.span ‚Ñù ((fun (a: X.powerset) ‚Ü¶
    subset_intersection_indicator F s (a: Finset Œ± ) k) '' F):= by
    apply Submodule.span_mono
    simp only [Set.singleton_subset_iff, Set.mem_image, mem_coe, Subtype.exists, mem_powerset,
      exists_and_right]
    use A
    constructor
    ¬∑ have hAU : A.val ‚äÜ X :=by
        intro x hx
        have hh := A.2
        rw [@mem_powerset] at hh
        exact hh hx
      use hAU
    ¬∑ rfl

  have hsmallspan: H ‚àà Submodule.span ‚Ñù ({subset_intersection_indicator F s A k}):=by
    have hG:= fun r => fun hr =>  vector_sum_eq_intersection_sum F k s L
      hintersect huniform r hr ‚ü®A, hA1‚ü©
    let inter_matrix : Matrix (Fin s) F ‚Ñù := fun l => intersection_indicator F A ((enumL hL_card).symm l)
    let coe_matrix: Matrix (Fin s) (Fin s) ‚Ñù := fun r => fun l =>
      (Nat.choose ((enumL hL_card).symm l) r) * (Nat.choose (k - ((enumL hL_card).symm l)) (s - r))
    let G_matrix: Matrix (Fin s) F ‚Ñù:=  fun r => subset_intersection_indicator F s A r
    have hGmat : G_matrix = coe_matrix *  inter_matrix := by
      unfold G_matrix
      unfold coe_matrix
      unfold inter_matrix
      funext r
      rw [hG r]
      ¬∑ rw [Matrix.mul_apply_eq_vecMul, Matrix.vecMul_eq_sum, fun f ‚Ü¶ Eq.symm (sum_coe_sort L f),
          Finset.sum_equiv (enumL hL_card)]
        ¬∑ exact fun l => by refine' ‚ü®fun hl => mem_univ ((enumL hL_card) l), fun hl => mem_univ l‚ü©
        ¬∑ intro l hl
          rw [Equiv.symm_apply_apply]
          rfl
      ¬∑ exact Fin.is_le'
    have hInv: Invertible coe_matrix := by
      unfold coe_matrix
      sorry
      done
    have hGcoe : coe_matrix ‚Åª¬π * G_matrix = inter_matrix := by
      rw [hGmat, ‚Üê Matrix.mul_assoc]
      simp only [Matrix.inv_mul_of_invertible, Matrix.one_mul]
    let k_fin := (enumL hL_card) ‚ü®k, hL‚ü©

    have hGcoe_k: (coe_matrix ‚Åª¬π * G_matrix) k_fin = inter_matrix k_fin := by
      exact congrFun hGcoe k_fin

    unfold G_matrix at hGcoe_k
    unfold coe_matrix at hGcoe_k
    unfold inter_matrix at hGcoe_k
    rw [Equiv.symm_apply_apply, hA2] at hGcoe_k
    rw [‚Üê hGcoe_k]
    rw [Matrix.mul_apply_eq_vecMul]
    rw [Matrix.vecMul_eq_sum]
    sorry

  have h: H ‚àà Submodule.span ‚Ñù ({subset_intersection_indicator F s A k})
    ‚Üí H‚àà Submodule.span ‚Ñù ((fun (a: X.powerset) ‚Ü¶ subset_intersection_indicator F s (a: Finset Œ± ) k) '' F) := by
      exact fun a ‚Ü¶ himp_le hsmallspan

  apply h

  exact hsmallspan



theorem span_bar: Submodule.span ‚Ñù (subset_indicator_set F s)
    = (‚ä§: Submodule ‚Ñù (F ‚Üí ‚Ñù)) :=by
  ext v
  constructor
  ¬∑ intro hv
    trivial
  ¬∑ sorry



#check subset_vector_span_dim_le

theorem Ray_Chaudhuri_Wilson (hX: #X = n) (huniform: uniform F k) (hintersect : intersecting F L)
    (hL : #L = s): #F ‚â§ Nat.choose n s := (subset_vector_span_dim_le n F s) (span_bar F s) hX
